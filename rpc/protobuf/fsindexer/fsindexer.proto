syntax = "proto3";
package fsindexer;

import "google/protobuf/empty.proto";

// Query service for returning indexed files
service Query {
  // Simple ping method to show service is "up"
  rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty);

  // Return indexes
  rpc List(google.protobuf.Empty) returns (ListResponse);

  // Query files
  rpc Query(QueryRequest) returns (QueryResponse);
}

// Indexer service for indexing the file system
service Indexer {
    // Simple ping method to show service is "up"
    rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Return indexes
    rpc List(google.protobuf.Empty) returns (ListResponse);

    // Index a filesystem
    rpc AddIndex(IndexRequest) returns (Index);

    // Reindex an existing index
    rpc ReIndex(IndexId) returns (google.protobuf.Empty);

    // Delete an existing index
    rpc DeleteIndex(IndexId) returns (google.protobuf.Empty);
}

// Message to index the filesystem
message IndexRequest {
    string path = 1;
    bool watch = 2;
}

// List of indexes
message ListResponse {
    repeated Index index = 1;
}

message IndexId {
    int64 id = 1;
}

// An indexed volume
message Index {
    enum IndexStatus {
        FS_STATUS_NONE = 0;
    	FS_STATUS_INDEXING = 1;
	    FS_STATUS_IDLE = 2;
    	FS_STATUS_WATCHING = 3;
    }
    int64 id = 1;
    string name = 2;
    uint64 count = 3;
    IndexStatus status = 4;
}

// An indexed file
message File {
    int64 id =1;
    Index index = 2;
    string path = 3;
    string name = 4;
    string ext = 5;
    string mimetype = 6;
    int64 size = 7;
}

// Query Request
message QueryRequest {
    uint64 limit = 1;
}

// Query Response
message QueryResponse {
    uint64 count = 1;
    uint64 limit = 2;
    repeated File file = 3;
}

